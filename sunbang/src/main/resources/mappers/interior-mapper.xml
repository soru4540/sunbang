<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC
"-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="interiorMapper">



<resultMap type="BoardFull" id="resultBoardFull">
	<id property="board_no" column="board_no"/>
		<result property="board_type" column="board_type" />
		<result property="space" column="space" />
		<result property="housing_type" column="housing_type" />
		<result property="category1" column="category1" />
		<result property="category2" column="category2" />
		<result property="category3" column="category3" />
		<result property="floor_area" column="floor_area" />
		<result property="color1" column="color1" />
		<result property="color2" column="color2" />
		<result property="color3" column="color3" />
		<result property="board_title" column="board_title" />
		<result property="budget" column="budget" />
		<result property="style" column="style" />
		<result property="board_hits" column="board_hits" />
		<result property="board_date" column="board_date" />
		<result property="board_status" column="board_status" />		
		<result property="post_no" column="post_no"/>
        <result property="post_keyword" column="post_keyword" />
        <result property="post_data" column="post_data" />
        <result property="post_contents" column="post_contents" />      
        <result property="user_no" column="user_no" />	
        <result property="user_id" column="user_id" />	
        <result property="user_profile" column="user_profile" />
        <result property="nickname" column="nickname" />
        <result property="user_name" column="user_name" /> 
        <result property="like_count" column="like_count" /> 
        <result property="follow_count" column="follow_count" />         
</resultMap>

<resultMap type="Board" id="resultBoard">
	<id property="board_no" column="board_no"/>
		<result property="board_type" column="board_type" />
		<result property="space" column="space" />
		<result property="housing_type" column="housing_type" />
		<result property="category1" column="category1" />
		<result property="category2" column="category2" />
		<result property="category3" column="category3" />
		<result property="floor_area" column="floor_area" />
		<result property="color1" column="color1" />
		<result property="color2" column="color2" />
		<result property="color3" column="color3" />
		<result property="board_title" column="board_title" />
		<result property="budget" column="budget" />
		<result property="style" column="style" />
		<result property="board_hits" column="board_hits" />
		<result property="board_date" column="board_date" />
		<result property="board_status" column="board_status" />
		<result property="user_no" column="user_no" />	
</resultMap>

<resultMap type="Post" id="resultPost">
   <id property="post_no" column="post_no"/>
   <result property="post_keyword" column="post_keyword" />
   <result property="post_data" column="post_data" />
   <result property="post_contents" column="post_contents" />
   <result property="board_no" column="board_no" />      
</resultMap>

<resultMap type="ReplyFull" id="resultReplyFull">
   <id property="reply_no" column="reply_no"/>
    <result property="reply_lev" column="reply_lev" />
    <result property="origin_reply_no" column="origin_reply_no" />
    <result property="reference_reply_no" column="reference_reply_no"/>
    <result property="reply_contents" column="reply_contents" />   
    <result property="board_no" column="board_no" />   
    <result property="user_no" column="user_no" />	
    <result property="user_profile" column="user_profile" />
    <result property="nickname" column="nickname" />
    <result property="user_name" column="user_name" />  
    <result property="re_reply_no" column="re_reply_no"/>
    <result property="re_user_no" column="re_user_no" />	
    <result property="re_user_profile" column="re_user_profile" />
    <result property="re_nickname" column="re_nickname" />
    <result property="re_user_name" column="re_user_name" />        
</resultMap>

<resultMap type="Reply" id="resultReply">
   <id property="reply_no" column="reply_no"/>
    <result property="reply_lev" column="reply_lev" />
    <result property="origin_reply_no" column="origin_reply_no" />
    <result property="reference_reply_no" column="reference_reply_no"/>
    <result property="reply_contents" column="reply_contents" />
    <result property="user_no" column="user_no" />
    <result property="board_no" column="board_no" />   
</resultMap>

<resultMap type="Like" id="resultLike">
    <id property="like_no" column="like_no"/>
      <result property="user_no" column="user_no" />
        <result property="board_no" column="board_no" />
</resultMap>

<resultMap type="FollowFull" id="resultFollowFull">
    <id property="follow_no" column="follow_no"/>
     <result property="follower_no" column="follower_no" />
      <result property="user_no" column="user_no" />   
      <result property="user_profile" column="user_profile" />
      <result property="user_id" column="user_id" />
      <result property="nickname" column="nickname" />
      <result property="user_name" column="user_name" /> 
      <result property="following_count" column="following_count" />
      <result property="follow_count" column="follow_count" />        
</resultMap>

<resultMap type="Follow" id="resultFollow">
    <id property="follow_no" column="follow_no"/>
     <result property="follower_no" column="follower_no" />
      <result property="user_no" column="user_no" />      
</resultMap>

<resultMap type="Ipaging" id="resultIpaging">
    <id property="page" column="page"/>
    <result property="start_num" column="start_num" />
    <result property="end_num" column="end_num" />    
    <result property="board_type" column="board_type" />
    <result property="user_no" column="user_no" />    
    <result property="keyword1" column="keyword1"/>
    <result property="keyword2" column="keyword2" />
    <result property="keyword3" column="keyword3" />    
    <result property="keyword4" column="keyword4" />
    <result property="keyword5" column="keyword5" />   
    <result property="keyword6" column="keyword6" />
</resultMap>

<resultMap id="resultReport" type="Report">
		<id property="report_no" column="report_no" />
		<result property="report_system" column="report_system" />
		<result property="category" column="category" />
		<result property="reported_board" column="reported_board" />
		<result property="contents_no" column="contents_no" />
		<result property="contents" column="contents" />
		<result property="report_date" column="report_date" />
		<result property="handle_date" column="handle_date" />
		<result property="report_status" column="report_status" />
		<result property="user_no" column="user_no" />
</resultMap>

<!--  ///////////////////////////////////////////////////////진보/////////////////////////////////////////////////////// -->

<!--  인테리어 TOP 5 -->
<select id="selectInteriorTop5" resultMap="resultBoardFull">
select board_no,board_type,board_title,board_hits,post_no,post_keyword,post_data, user_no,user_id, nickname,user_profile,like_count
from (select board_no,board_type,board_title,board_hits,post_no,post_keyword,post_data, user_no,user_id, nickname,user_profile,nvl(like_count,0) like_count from tb_board
left join tb_post using(board_no)
left join tb_user using(user_no)
left join(select count(user_no) like_count,board_no from tb_like
group by board_no) using(board_no)
where post_no in (SELECT MIN(post_no)
                  FROM tb_post
                  GROUP BY board_no)               
order by board_hits desc, like_count desc, board_no desc
)
<![CDATA[ where rownum <6 ]]>
</select>


<!-- 메인 집들이 top1 -->
<select id="selectHbTop1" resultMap="resultBoardFull">
select board_no,board_type,board_title,board_hits,post_no,post_keyword,post_data, user_no,user_id, nickname,user_profile,like_count
from (select board_no,board_type,board_title,board_hits,post_no,post_keyword,post_data, user_no,user_id, nickname,user_profile,nvl(like_count,0) like_count from tb_board
left join tb_post using(board_no)
left join tb_user using(user_no)
left join(select count(user_no) like_count, board_no from tb_like
group by board_no) using(board_no)
where post_no in (SELECT MIN(post_no)
                  FROM tb_post
                  GROUP BY board_no)
      and board_type='housewarming'            
order by board_hits desc, like_count desc, board_no desc
)
where rownum =1
</select>

<!-- 메인 노하우 top4 -->
<select id="selectKbTop4" resultMap="resultBoardFull">
select board_no,board_type,board_title,board_hits,category1,category2,category3,post_no,post_keyword,post_data,user_id, user_no, nickname,user_profile,like_count
from (select board_no,board_type,board_title,board_hits,category1,category2,category3,post_no,post_keyword,post_data, user_no,user_id,nickname,user_profile,nvl(like_count,0) like_count from tb_board
left join tb_post using(board_no)
left join tb_user using(user_no)
left join(select count(user_no) like_count, board_no from tb_like
group by board_no) using(board_no)
where post_no in (SELECT MIN(post_no)
                  FROM tb_post
                  GROUP BY board_no)
      and board_type='knowhow'            
order by board_hits desc, like_count desc, board_no desc
)
where <![CDATA[ rownum <5 ]]>
</select>

<!-- 메인 집들이 top3 -->
<select id="selectHbTop3" resultMap="resultBoardFull">
select board_no,board_type,board_hits,post_no,post_keyword,post_data, user_no,user_id, nickname,user_profile,like_count
from (select board_no,board_type,board_hits,post_no,post_keyword,post_data, user_no, nickname,user_id,user_profile,nvl(like_count,0) like_count from tb_board
left join tb_post using(board_no)
left join tb_user using(user_no)
left join(select count(user_no) like_count, board_no from tb_like
group by board_no) using(board_no)
where post_no in (SELECT MIN(post_no)
                  FROM tb_post
                  GROUP BY board_no)
      and board_type='housewarming'            
order by board_hits desc, like_count desc, board_no desc
)
where <![CDATA[  rownum <4 ]]>
</select>

<!-- 메인 사진 top8 -->
<select id="selectPbTop8" resultMap="resultBoardFull">
 select board_no,board_type,board_hits,post_no,post_keyword,post_data, user_no,user_id, nickname,user_profile,like_count
from (select board_no,board_type,board_hits,post_no,post_keyword,post_data, user_no, nickname,user_id,user_profile,nvl(like_count,0) like_count from tb_board
left join tb_post using(board_no)
left join tb_user using(user_no)
left join(select count(user_no) like_count, board_no from tb_like
group by board_no) using(board_no)
where post_no in (SELECT MIN(post_no)
                  FROM tb_post
                  GROUP BY board_no)
      and board_type='photograph'            
order by board_hits desc, like_count desc, board_no desc
)
where <![CDATA[ rownum <9 ]]>
</select>

<!-- 게시판등록 -->
<insert id="insertBoard" parameterType="Board">
<choose>
<when test="board_type.equals('photograph')">
   insert into tb_board
   (board_no,board_type,category1,space,floor_area,color1,color2,color3,board_title,board_hits,board_date,board_status,user_no)
   values(board_seq.nextval,#{board_type},#{category1},#{space},#{floor_area},#{color1},#{color2},#{color3},#{board_title},0,default,default,#{user_no})
</when>
   <when test="board_type.equals('housewarming')">
      insert into tb_board
      (board_no,board_type,housing_type,floor_area,color1,color2,color3,board_title,budget,style,board_hits,board_date,board_status,user_no)
      values(board_seq.nextval,#{board_type},#{housing_type},#{floor_area},#{color1},#{color2},#{color3},#{board_title},#{budget},#{style},0,default,default,#{user_no})
   </when>
   <when test="board_type.equals('knowhow')">
      insert into tb_board
      (board_no,board_type,category1,category2,category3,board_title,board_hits,board_date,board_status,user_no)
      values(board_seq.nextval,#{board_type},#{category1},#{category2},#{category3},#{board_title},0,default,default,#{user_no})
   </when>
</choose>
</insert>

<!-- 게시판번호 불러오기 -->
<select id="selectBoardNo" parameterType="_int" resultType="_int">
select max(board_no) from tb_board where user_no = #{user_no}
</select>

<!-- 게시물등록 -->
<insert id="insertPost" parameterType="Post">
insert into tb_post values(<if test="post_no != 0">#{post_no}</if><if test="post_no == 0">post_seq.nextval</if>,#{post_keyword},#{post_data,jdbcType=VARCHAR},#{post_contents,jdbcType=VARCHAR},#{board_no})
</insert>

<!-- 게시판리스트 카운트 -->
<select id="selectListCount" parameterType="string" resultType="_int">
select count(board_no) from tb_board where board_type = #{board_type}
</select>

<!-- 사진게시판리스트 출력 -->
<select id="selectPhotographList" parameterType="Ipaging" resultMap="resultBoardFull">
select * from (select row_number() over(order by board_no desc) as rnum, board_no,board_title,board_type,board_hits,space, housing_type, category1, category2, category3, floor_area, color1, color2, color3,
budget,style,post_no,post_keyword,post_data, user_no, nickname,user_profile,nvl(like_count,0) like_count ,nvl(follow_count,0) follow_count
from tb_board
left join tb_post using(board_no)
left join tb_user using(user_no)
left join(select count(follower_no) follow_count,user_no from tb_follow
group by user_no) using(user_no)
left join(select count(user_no) like_count, board_no from tb_like
group by board_no) using(board_no)
where post_no in (SELECT MIN(post_no) FROM tb_post GROUP BY board_no)
and board_type= #{board_type} <if test="keyword2 != 'empty'"> and space = #{keyword2} </if>
    <choose>
    <when test="keyword3 != 'empty' and keyword3 == '10평미만'"> 
    <![CDATA[ and floor_area > 10 ]]>     
    </when>
    <when test="keyword3 != 'empty' and keyword3 == '10평대'">   
    <![CDATA[ and floor_area >= 10 and floor_area < 20 ]]>
    </when>
    <when test="keyword3 != 'empty' and keyword3 == '20평대'">   
    <![CDATA[ and floor_area >= 20 and floor_area < 30 ]]>
    </when>
    <when test="keyword3 != 'empty' and keyword3 == '30평대'">   
    <![CDATA[ and floor_area >= 30 and floor_area < 40 ]]>
    </when>
    <when test="keyword3 != 'empty' and keyword3 == '40평대이상'">   
    <![CDATA[ and floor_area > 40 ]]>
    </when>
    </choose>              
     <if test="keyword4 != 'empty'"> and (color1 = #{keyword4} or color2 = #{keyword4} or color3 = #{keyword4})</if>
     <choose>
     <when test="keyword1 != 'empty' and keyword1 == '인기순'">
     order by board_hits desc, like_count desc
     </when>          
     <when test="keyword1 != 'empty' and keyword1 == '팔로우'">
     order by follow_count desc
     </when>          
     </choose>            
)where <![CDATA[ rnum >= #{start_num} and rnum <= #{end_num} ]]>
</select>

<!-- 집들이게시판리스트 출력 -->
<select id="selectHousewarmingList" parameterType="Ipaging" resultMap="resultBoardFull">
select * from (select row_number() over(order by board_no desc) as rnum, board_no,board_title,board_type,board_hits,space, housing_type, category1, category2, category3, floor_area, color1, color2, color3,
budget,style,post_no,post_keyword,post_data, user_no, nickname,user_profile,nvl(like_count,0) like_count ,nvl(follow_count,0) follow_count
from tb_board
left join tb_post using(board_no)
left join tb_user using(user_no)
left join(select count(follower_no) follow_count,user_no from tb_follow
group by user_no) using(user_no)
left join(select count(user_no) like_count, board_no from tb_like
group by board_no) using(board_no)
where post_no in (SELECT MIN(post_no) FROM tb_post GROUP BY board_no)
and board_type= #{board_type} <if test="keyword2 != 'empty'"> and housing_type = #{keyword2} </if>
 <choose>
    <when test="keyword3 != 'empty' and keyword3 == '10평미만'"> 
    <![CDATA[ and floor_area > 10 ]]>     
    </when>
    <when test="keyword3 != 'empty' and keyword3 == '10평대'">   
    <![CDATA[ and floor_area >= 10 and floor_area < 20 ]]>
    </when>
    <when test="keyword3 != 'empty' and keyword3 == '20평대'">   
    <![CDATA[ and floor_area >= 20 and floor_area < 30 ]]>
    </when>
    <when test="keyword3 != 'empty' and keyword3 == '30평대'">   
    <![CDATA[ and floor_area >= 30 and floor_area < 40 ]]>
    </when>
    <when test="keyword3 != 'empty' and keyword3 == '40평대이상'">   
    <![CDATA[ and floor_area > 40 ]]>
    </when>
    </choose>
     <choose>
    <when test="keyword4 != 'empty' and keyword4 == '~100만원'"> 
    <![CDATA[ and budget <= 1000000 ]]>     
    </when>
    <when test="keyword4 != 'empty' and keyword4 == '100~200만원'">   
    <![CDATA[ and budget >= 1000000 and budget <= 2000000 ]]>
    </when>
    <when test="keyword4 != 'empty' and keyword4 == '200~300만원'">   
    <![CDATA[ and budget >= 2000000 and budget <= 3000000 ]]>
    </when>
    <when test="keyword4 != 'empty' and keyword4 == '300~500만원'">   
    <![CDATA[ and budget >= 3000000 and budget <= 5000000 ]]>
    </when>
    <when test="keyword4 != 'empty' and keyword4 == '500~1000만원'">   
    <![CDATA[ and budget >= 5000000 and budget <= 10000000 ]]>
    </when>
     <when test="keyword4 != 'empty' and keyword4 == '1000~2000만원'">   
    <![CDATA[ and budget >= 10000000 and budget <= 20000000 ]]>
    </when>
     <when test="keyword4 != 'empty' and keyword4 == '2000~3000만원'">   
    <![CDATA[ and budget >= 20000000 and budget <= 30000000 ]]>
    </when>
     <when test="keyword4 != 'empty' and keyword4 == '3000만원~'">   
    <![CDATA[ and budget >= 30000000 ]]>
    </when>
    </choose>            
    <if test="keyword5 != 'empty'"> and style = #{keyword5} </if>   
    <if test="keyword6 != 'empty'"> and (color1 = #{keyword6} or color2 = #{keyword6} or color3 = #{keyword6})</if>
     <choose>
     <when test="keyword1 != 'empty' and keyword1 == '조회수'">
     order by board_hits desc
     </when>          
     <when test="keyword1 != 'empty' and keyword1 == '좋아요'">
     order by like_count desc
     </when>
     <when test="keyword1 != 'empty' and keyword1 == '팔로우'">
     order by follow_count desc
     </when>            
     </choose>  
 ) where <![CDATA[ rnum >= #{start_num} and rnum <= #{end_num} ]]>
</select>


<!-- 노하우게시판 리스트 출력 -->
<select id="selectKnowhowList" parameterType="Ipaging" resultMap="resultBoardFull">
	select * from (select row_number() over(order by board_no desc) as
	rnum, board_no,board_title,board_type,board_hits,space, housing_type,
	category1, category2, category3, floor_area, color1, color2, color3,
	budget,style,post_no,post_keyword,post_data, user_no,
	nickname,user_profile,nvl(like_count,0) like_count ,nvl(follow_count,0)
	follow_count
	from tb_board
	left join tb_post using(board_no)
	left join tb_user using(user_no)
	left join(select count(follower_no) follow_count,user_no from tb_follow
	group by user_no) using(user_no)
	left join(select count(user_no) like_count, board_no from tb_like
	group by board_no) using(board_no)
	where post_no in (SELECT MIN(post_no) FROM tb_post GROUP BY board_no)
	and board_type= #{board_type}
	<if test="keyword1 != 'empty'"> and (category1 = #{keyword1} or category2 = #{keyword1} or category3 = #{keyword1})</if>
	<if test="keyword2 != 'empty'"> and (category1 = #{keyword2} or category2 = #{keyword2} or category3 = #{keyword2})</if>
	<if test="keyword3 != 'empty'"> and (category1 = #{keyword3} or category2 = #{keyword3} or category3 = #{keyword3})</if>
	<if test="keyword4 != 'empty'"> and (category1 = #{keyword4} or category2 = #{keyword4} or category3 = #{keyword4})</if>
	<if test="keyword5 != 'empty'"> and (category1 = #{keyword5} or category2 = #{keyword5} or category3 = #{keyword5})</if>
) where <![CDATA[ rnum >= #{start_num} and rnum <= #{end_num} ]]>
</select>

<!-- 좋아요 체크 리스트 출력 -->
<select id="selectLikeCheck" parameterType="_int" resultMap="resultLike">
select * from tb_like where user_no= #{user_no} 
</select>

<!-- 좋아요 등록 -->
<insert id="insertLike" parameterType="Like">
insert into tb_like values(like_seq.nextval,#{user_no},#{board_no})
</insert>

<!-- 좋아요 삭제 -->
<delete id="deleteLike" parameterType="Like">
delete from tb_like where user_no=#{user_no} and board_no=#{board_no}
</delete>


<!-- 팔로우 등록 -->
<insert id="insertFollow" parameterType="Follow">
insert into tb_follow values(follow_seq.nextval,#{follower_no},#{user_no})
</insert>

<!-- 팔로우 삭제 -->
<delete id="deleteFollow" parameterType="Follow">
delete from tb_follow where follower_no = #{follower_no} and user_no = #{user_no} 
</delete>


<!-- 댓글 리스트 출력 -->
<select id="selectReplyList" parameterType="_int" resultMap="resultReplyFull">
select * from tb_reply 
left join tb_user using (user_no) 
left join (select user_no re_user_no,reply_no re_reply_no,user_id re_user_id,nickname re_nickname,user_profile re_user_profile from tb_reply
left join tb_user using (user_no)) on(reference_reply_no = re_reply_no)
where board_no = #{board_no}
order by origin_reply_no asc, reply_lev asc, reply_no asc
</select>

<!-- 댓글 등록 -->
<insert id="insertReply" parameterType="Reply">
insert into tb_reply values(reply_seq.nextval,#{reply_lev},<if test="origin_reply_no == 0">reply_seq.currval,</if>
<if test="origin_reply_no != 0">#{origin_reply_no},</if>#{reference_reply_no,jdbcType=INTEGER},#{reply_contents},#{user_no},#{board_no})
</insert>

<!-- 댓글 삭제 -->
<delete id="deleteReply" parameterType="_int">
delete from tb_reply where reply_no = #{reply_no}
</delete>

<!-- 댓글 수정 -->
<update id="updateReply" parameterType="Reply">
update tb_reply set reply_contents = #{reply_contents} where reply_no = #{reply_no}
</update>

<!-- 유저 팔로우 체크 -->
<select id="selectCheckFollow" parameterType="Follow" resultType="_int">
select count(*) from tb_follow
where user_no = #{user_no} and follower_no = #{follower_no}
</select>

<!-- 인테리어 유저 신고 등록 -->
<insert id="insertReport" parameterType="Report">
insert into tb_report values (report_seq.nextval, #{report_system}, #{category}, #{reported_board}, #{contents_no}, #{contents}, sysdate, null, 0, #{user_no})
</insert>

<!-- 게시판 수정페이지 출력 -->
<select id="selectBoardUpdateView" parameterType="_int" resultMap="resultBoardFull">
select board_no, board_type ,space, housing_type,category1, category2, category3, floor_area, color1, color2, color3,board_title,
        budget,style,board_hits,board_status,post_no,post_keyword,post_data,post_contents, user_no
from tb_board
left join tb_post using(board_no)
where board_no = #{board_no}
order by post_no asc
</select>

<!-- 게시판 수정 -->
<update id="updateBoard" parameterType="Board">
update tb_board set space = #{space,jdbcType=VARCHAR}, housing_type=#{housing_type,jdbcType=VARCHAR}, category1 = #{category1,jdbcType=VARCHAR}, category2 = #{category2,jdbcType=VARCHAR}, category3 = #{category3,jdbcType=VARCHAR}, floor_area=#{floor_area,jdbcType=INTEGER}, 
color1=#{color1,jdbcType=VARCHAR},color2=#{color2,jdbcType=VARCHAR},color3=#{color3,jdbcType=VARCHAR}, board_title = #{board_title,jdbcType=VARCHAR}, budget=#{budget,jdbcType=INTEGER}, style=#{style,jdbcType=VARCHAR}, board_status = #{board_status,jdbcType=INTEGER}
where board_no = #{board_no} 
</update>

<!-- 게시물 수정 -->
<update id="updatePost" parameterType="Post">
update tb_post set post_keyword= #{post_keyword}, <if test="post_data != null">post_data = #{post_data}</if> <if test="post_data != null and post_contents != null"> , </if> <if test="post_contents != null">post_contents = #{post_contents}</if>
where post_no = #{post_no}
</update>


<!-- 게시물 삭제 -->
<delete id="deletePost" parameterType="_int">
delete from tb_post where post_no = #{post_no}
</delete>

<!-- 유저의 팔로우수 팔로잉수 출력 -->
<select id="selectUserFollowFollowing" parameterType="_int" resultMap="resultFollowFull">
select * from tb_user 
left join(select count(follower_no) following_count,user_no from tb_follow
group by user_no) using(user_no)
left join(select follower_no user_no, count(user_no) follow_count from tb_follow 
group by follower_no) using(user_no)
where user_no = #{user_no}
</select>

<!-- 유저의 팔로워들 출력 -->
<select id="selectFollowList" parameterType="followfull" resultMap="resultFollowFull">
select * from tb_follow f
left join tb_user u on (f.user_no = u.user_no)
where f.follower_no =#{user_no} <if test="keyword != 'empty'"> and (u.user_id like '%' || #{keyword} || '%' or u.nickname like '%' || #{keyword} || '%' ) </if> 
</select>

<!-- 유저의 팔로잉들 출력 -->
<select id="selectFollowingList" parameterType="followfull" resultMap="resultFollowFull">
select * from tb_follow f
left join tb_user u on (f.follower_no = u.user_no)
where f.user_no = #{user_no} <if test="keyword != 'empty'"> and (u.user_id like '%' || #{keyword} || '%' or u.nickname like '%' || #{keyword} || '%' ) </if>
</select>

<!-- 검색 리스트 카운트 출력 -->
<select id="selectSearchListCount" parameterType="string" resultType="_int"> 
select count(*)
from (select space || housing_type ||category1 || category2 || category3 || floor_area||'평' || decode(color1,'#d53736','레드REDred빨강','#fed144','옐로우YELLOWyellow노랑','#96d783','그린GREENgreen녹색','#3d97dd','블루BLUEblue파랑','#ee8a94','핑크PINKpink분홍','#fafafa','화이트WHITEwhite흰색')
|| decode(color2,'#d53736','레드REDred빨강','#fed144','옐로우YELLOWyellow노랑','#96d783','그린GREENgreen녹색','#3d97dd','블루BLUEblue파랑','#ee8a94','핑크PINKpink분홍','#fafafa','화이트WHITEwhite흰색') ||
decode(color3,'#d53736','레드REDred빨강','#fed144','옐로우YELLOWyellow노랑','#96d783','그린GREENgreen녹색','#3d97dd','블루BLUEblue파랑','#ee8a94','핑크PINKpink분홍','#fafafa','화이트WHITEwhite흰색') || board_title ||
budget||'원' || style ||decode(post_keyword,'video','동영상') || post_contents || user_id || nickname as search
from tb_board
left join tb_post using(board_no)
left join tb_user using(user_no)
order by board_no asc, post_no asc)
where search like '%' || #{keyword} || '%'
</select>

<!-- 검색 리스트 출력 -->
<select id="selectSearchList" parameterType="string" resultMap="resultBoardFull">
select *
from (select board_no,board_type,space, housing_type,category1, category2, category3, floor_area, color1, color2, color3,board_title,
budget,style,board_hits,board_status,post_no,post_keyword,post_data,post_contents, user_no,user_name,user_id, nickname,like_count,follow_count, space || housing_type ||category1 || category2 || category3 || floor_area||'평' || decode(color1,'#d53736','레드REDred빨강','#fed144','옐로우YELLOWyellow노랑','#96d783','그린GREENgreen녹색','#3d97dd','블루BLUEblue파랑','#ee8a94','핑크PINKpink분홍','#fafafa','화이트WHITEwhite흰색')
|| decode(color2,'#d53736','레드REDred빨강','#fed144','옐로우YELLOWyellow노랑','#96d783','그린GREENgreen녹색','#3d97dd','블루BLUEblue파랑','#ee8a94','핑크PINKpink분홍','#fafafa','화이트WHITEwhite흰색') ||
decode(color3,'#d53736','레드REDred빨강','#fed144','옐로우YELLOWyellow노랑','#96d783','그린GREENgreen녹색','#3d97dd','블루BLUEblue파랑','#ee8a94','핑크PINKpink분홍','#fafafa','화이트WHITEwhite흰색') || board_title ||
budget||'원' || style ||decode(post_keyword,'video','동영상') || post_contents || user_id || nickname as search
from tb_board
left join tb_post using(board_no)
left join tb_user using(user_no)
left join(select count(follower_no) follow_count,user_no from tb_follow
group by user_no) using(user_no)
left join(select count(user_no) like_count,board_no from tb_like
group by board_no) using(board_no)
where post_no in (SELECT MIN(post_no)
                  FROM tb_post
                  GROUP BY board_no)
order by board_no desc)
where search like '%' || #{keyword} || '%'
</select>

<!-- 뉴스피드 리스트 카운트 -->
<select id="selectNewsFeedListCount" parameterType="Ipaging" resultType="_int">
select count(*) from tb_board
where user_no in (select user_no from tb_follow where follower_no = #{user_no} )
</select>

<select id="selectNewsFeedList" parameterType="Ipaging" resultMap="resultBoardFull">
select * from (select row_number() over(order by board_no desc) as rnum, board_no,board_title,board_type,board_hits,space, housing_type, category1, category2, category3, floor_area, color1, color2, color3,
budget,style,post_no,post_keyword,post_data, user_no, user_id, nickname,user_profile,nvl(like_count,0) like_count ,nvl(follow_count,0) follow_count
from tb_board
left join tb_post using(board_no)
left join tb_user using(user_no)
left join(select count(follower_no) follow_count,user_no from tb_follow
group by user_no) using(user_no)
left join(select count(user_no) like_count, board_no from tb_like
group by board_no) using(board_no)
where post_no in (SELECT MIN(post_no) FROM tb_post GROUP BY board_no)
and user_no in (select follower_no from tb_follow where user_no = #{user_no})
order by board_no desc
) where <![CDATA[ rnum >= #{start_num} and rnum <= #{end_num} ]]>
</select>

<!-- 스토리 리스트 카운트 -->
<select id="selectStoryListCount" parameterType="Ipaging" resultType="_int">
select count(*) from tb_board
where user_no = #{user_no}
</select>

<!-- 스토리 리스트 출력 -->
<select id="selectStoryList" parameterType="Ipaging" resultMap="resultBoardFull">
select * from (select row_number() over(order by board_no desc) as rnum, board_no,board_title,board_type,board_hits,space, housing_type, category1, category2, category3, floor_area, color1, color2, color3,
budget,style,post_no,post_keyword,post_data, user_no, user_id, nickname,user_profile,nvl(like_count,0) like_count ,nvl(follow_count,0) follow_count
from tb_board
left join tb_post using(board_no)
left join tb_user using(user_no)
left join(select count(follower_no) follow_count,user_no from tb_follow
group by user_no) using(user_no)
left join(select count(user_no) like_count, board_no from tb_like
group by board_no) using(board_no)
where post_no in (SELECT MIN(post_no) FROM tb_post GROUP BY board_no)
and user_no = #{user_no}
order by board_no desc
) where <![CDATA[ rnum >= #{start_num} and rnum <= #{end_num} ]]>
</select>




<!--  ///////////////////////////////////////////////////////성현/////////////////////////////////////////////////////// -->

<!-- know detail 출력 -->
<select id="selectKnowHowPostList" parameterType="_int"  resultMap="resultBoardFull">
select *
from (select row_number() over(order by board_no desc) as rnum, board_no,board_title,board_type,board_hits,board_date,category1, category2, category3,post_no,post_keyword,post_contents,post_data, user_no, nickname,user_profile,nvl(like_count,0) like_count,nvl(follow_count,0) follow_count
from tb_board
left join tb_post using(board_no)
left join tb_user using(user_no)
left join(select count(follower_no) follow_count,user_no from tb_follow
group by user_no) using(user_no)
left join(select count(user_no) like_count,board_no from tb_like
group by board_no) using(board_no))
where board_no = #{board_no}
order by post_no
</select>

<select id="selectKnowhowLikeCheck" parameterType="Like" resultType="int">
	select count(*) from tb_like
	where user_no = #{user_no} and board_no = #{board_no}
</select>

<select id="selectKnowhowfollowCheck" parameterType="Follow" resultType="int">
	select count(*) from tb_follow
	where user_no = #{user_no} and follower_no = #{follower_no}
</select>

<select id="selectKnowhowReportCheck" parameterType="Report" resultType="int">
	select count(*) from tb_report
	where user_no = #{user_no} and contents_no = #{contents_no}
</select>

<insert id="insertKnowhowReport" parameterType="Report">
	insert into tb_report
	values (report_seq.nextval, 'interior', #{category}, 'knowhow', #{contents_no}, #{contents}, sysdate, null, 0, #{user_no})
</insert>

<update id="updateBoardHits" parameterType="int">
		update tb_board
		set board_hits = board_hits + 1
		where board_no = #{board_no}	
</update>



<!--  ///////////////////////////////////////////////////////서은/////////////////////////////////////////////////////// -->

<!-- 사진 detail 출력 -->
<select id="selectPhotoList" parameterType="_int"  resultMap="resultBoardFull">
select * from 
(select row_number() over(order by board_no desc) as rnum, board_no,board_type,category1,space,floor_area,color1,color2,color3,board_title,board_hits,post_no,post_keyword,post_contents,post_data,board_date,board_status,user_no, nickname,user_profile,nvl(like_count,0) like_count,nvl(follow_count,0) follow_count
from tb_board
left join tb_post using(board_no)
left join tb_user using(user_no)
left join(select count(follower_no) follow_count,user_no from tb_follow
group by user_no) using(user_no)
left join(select count(user_no) like_count,board_no from tb_like
group by board_no) using(board_no))
where board_no = #{board_no}
order by post_no asc
</select>

<!-- 집들이 detail 출력 -->
<select id="selectHouseWList" parameterType="_int" resultMap="resultBoardFull">
select * from 
(select row_number() over(order by board_no desc) as rnum, board_no,board_type,housing_type,floor_area,color1,color2,color3,board_title,budget,style,board_hits,post_no,post_keyword,post_contents,post_data,board_date,board_status,user_no, nickname,user_profile,nvl(like_count,0) like_count,nvl(follow_count,0) follow_count
from tb_board
left join tb_post using(board_no)
left join tb_user using(user_no)
left join(select count(follower_no) follow_count,user_no from tb_follow
group by user_no) using(user_no)
left join(select count(user_no) like_count,board_no from tb_like
group by board_no) using(board_no))
where board_no = #{board_no}
order by post_no asc
</select>

<!-- 해당 게시판 번호의 게시물 전체 삭제 -->
<!-- 좋아요 삭제 -->
<delete id="deleteAllLike" parameterType="_int">
delete from tb_like where board_no = #{board_no}
</delete>

<!-- 게시물삭제 -->
<delete id="deleteAllPost" parameterType="_int">
	delete from tb_post where board_no = #{board_no}
</delete>

<!-- 게시판 삭제 -->
<delete id="deleteBoard" parameterType="_int">
delete from tb_board where board_no = #{board_no} 
</delete>

<!-- 내 방 목록 -->
<select id="selectMyPhotograph" parameterType="_int"  resultMap="resultBoardFull">
select *
from (select row_number() over(order by board_no desc) as rnum, board_no,board_title,board_type,board_hits,board_date,category1,space,floor_area,color1,color2,color3,post_no,post_keyword,post_contents,post_data, user_no, nickname,user_profile,nvl(like_count,0) like_count,nvl(follow_count,0) follow_count
from tb_board
left join tb_post using(board_no)
left join tb_user using(user_no)
left join(select count(follower_no) follow_count,user_no from tb_follow
group by user_no) using(user_no)
left join(select count(user_no) like_count,board_no from tb_like
group by board_no) using(board_no))
where post_no in (SELECT MIN(post_no) FROM tb_post GROUP BY board_no) and user_no = #{user_no} and board_type = 'photograph'
order by rnum
</select>

<select id="selectMyHousewarming" parameterType="_int"  resultMap="resultBoardFull">
select *
from (select row_number() over(order by board_no desc) as rnum, board_no,board_title,board_type,board_hits,board_date,housing_type,floor_area,style,color1,color2,color3,budget,post_no,post_keyword,post_contents,post_data, user_no, nickname,user_profile,nvl(like_count,0) like_count,nvl(follow_count,0) follow_count
from tb_board
left join tb_post using(board_no)
left join tb_user using(user_no)
left join(select count(follower_no) follow_count,user_no from tb_follow
group by user_no) using(user_no)
left join(select count(user_no) like_count,board_no from tb_like
group by board_no) using(board_no))
where post_no in (SELECT MIN(post_no) FROM tb_post GROUP BY board_no) and user_no = #{user_no} and board_type = 'housewarming'
order by rnum
</select>

<select id="selectMyKnowhow" parameterType="_int"  resultMap="resultBoardFull">
select *
from (select row_number() over(order by board_no desc) as rnum, board_no,board_title,board_type,board_hits,board_date,category1,category2,category3,post_no,post_keyword,post_contents,post_data, user_no, nickname,user_profile,nvl(like_count,0) like_count,nvl(follow_count,0) follow_count
from tb_board
left join tb_post using(board_no)
left join tb_user using(user_no)
left join(select count(follower_no) follow_count,user_no from tb_follow
group by user_no) using(user_no)
left join(select count(user_no) like_count,board_no from tb_like
group by board_no) using(board_no))
where post_no in (SELECT MIN(post_no) FROM tb_post GROUP BY board_no) and user_no = #{user_no} and board_type = 'knowhow'
order by rnum
</select>

</mapper>